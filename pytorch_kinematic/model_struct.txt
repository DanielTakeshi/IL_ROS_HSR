block0
Sequential (
  (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU (inplace)
  (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (3): ReLU (inplace)
  (4): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))
  (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (6): ReLU (inplace)
  (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (8): ReLU (inplace)
  (9): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))
  (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (13): ReLU (inplace)
  (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (15): ReLU (inplace)
  (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (17): ReLU (inplace)
  (18): MaxPool2d (size=(2, 2), stride=(2, 2), dilation=(1, 1))
  (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (20): ReLU (inplace)
  (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (22): ReLU (inplace)
  (23): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (24): ReLU (inplace)
  (25): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (26): ReLU (inplace)
)
block1_1
Sequential (
  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU (inplace)
  (6): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
  (7): ReLU (inplace)
  (8): Conv2d(512, 38, kernel_size=(1, 1), stride=(1, 1))
)
block1_2
Sequential (
  (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU (inplace)
  (6): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
  (7): ReLU (inplace)
  (8): Conv2d(512, 19, kernel_size=(1, 1), stride=(1, 1))
)
block2_1
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
)
block2_2
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
)
block3_1
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
)
block3_2
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
)
block4_1
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
)
block4_2
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
)
block5_1
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
)
block5_2
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
)
block6_1
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 38, kernel_size=(1, 1), stride=(1, 1))
)
block6_2
Sequential (
  (0): Conv2d(185, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (1): ReLU (inplace)
  (2): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (3): ReLU (inplace)
  (4): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (5): ReLU (inplace)
  (6): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (7): ReLU (inplace)
  (8): Conv2d(128, 128, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
  (9): ReLU (inplace)
  (10): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
  (11): ReLU (inplace)
  (12): Conv2d(128, 19, kernel_size=(1, 1), stride=(1, 1))
)
